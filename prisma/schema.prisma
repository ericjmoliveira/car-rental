// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]

  @@map("users")
}

model Class {
  id              String        @id @default(cuid())
  name            String
  description     String
  carExample      String        @map("car_example")
  carExampleImage String        @map("car_example_image")
  details         String[]
  features        String[]
  pricePerDay     Int           @map("price_per_day")
  reservations    Reservation[]
}

model Location {
  id           String        @id @default(cuid())
  name         String
  reservations Reservation[]

  @@map("locations")
}

model Reservation {
  id              String    @id @default(cuid())
  userId          String?   @map("user_id")
  classId         String?   @map("class_id")
  locationId      String?   @map("location_id")
  pickupDate      DateTime  @map("pickup_date")
  returnDate      DateTime  @map("return_date")
  isYoungRenter   Boolean   @map("is_young_renter")
  totalPrice      Int       @map("total_price")
  reservationDate DateTime  @default(now()) @map("reservation_date")
  user            User?     @relation(fields: [userId], references: [id])
  class           Class?    @relation(fields: [classId], references: [id])
  location        Location? @relation(fields: [locationId], references: [id])

  @@map("reservations")
}
